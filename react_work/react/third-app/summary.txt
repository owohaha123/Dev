* Hooks
  - 클래스형 컴포넌트의 기능을 사용할 수 있도록 제공된 함수 라이브러리
  - 동적인 상태처리, 랜더링 시 작업설정,
    동적으로 생성되는 컴포넌트의 구별 및 제어 등
  - 함수형 컴포넌트에서 위의 기능들을 사용할 수 있도록 제공
  - 종류
    1) useState
       - 가변적인 상태(데이터, 속성)값 처리
    2) useEffect
       - 컴포넌트가 랜더링 될 때마다 특정 작업을 수행하도록 설정
         > useEffect(() => {...});
       - 조건부 실행) 두번째 파라미터를 작성
         > useEffect(() => {...}, [...]);
           - 컴포넌트가 처음 화면에 출력될 때만 실행
           - 두번째 파라미터로 빈 배열([]) 입력
             특정값이 변경될 때만  실행
           - [변수, 변수, ...]  
       - 뒷처리(cleanup)
         : 메모리 누수(leak)를 줄이기 위해 정리가 필요
         : useEffect에 뒷처리용 함수 작성
    3) useReducer
       - useState와 비슷한 hook
       - 컴포넌트 상황에 따라 다양한 상태를 다른 값으로 업데이트할 때 사용
       - 사용법
         const [state, dispatch] = useReducer(reducer, initState);
         state : 현재 상태값이자 업데이트 시 사용할 값을 저장한 객체
         dispatch : action을 발생시키는 함수
         reducer : action에 따라 state를 변경시키는 함수
           > function reducer(state, action){...} 형식으로 작성
         initState : state의 초기값
    4) useMemo
       - 컴포넌트 내부에서 발생하는 연산을 최적화할 때 사용하는 Hooks
       - 연산이 필요없는 상황에도 랜더링 할 때마다 재연산되는 것을 막아줄 수 있음
    5) useCallback
       - useMemo와 유사. 랜더링 성능 최적화
    6) useRef
       - Ref(Reference)는 리액트 코드를 통해 생성된 컴포넌트에 접근하는(식별하는)
         방법을 제공 (html의 id 속성 대신 사용)
       - 동적으로 자동생성되는 컴포넌트에 ref 값을 설정하여 제어 시 활용 가능



* 컴포넌트 스타일링
  1) css 활용 (className)
  2) 인라인 스타일링(스타일 객체를 작성하고 style 속성에 지정)
  3) Styled-components(추가 라이브러리)
     설치 > npm i styled-components
     CSS-in-JS 라이브러리 : 스타일의 정의를 css 파일이 아닌 js Component에 직접 지정

    참고) 렌더링?
          - 코드로 작성한 문장(명령)을 화면에 출력하는 요소로
            변환하여 출력하는 작업
