* React 실행 시 포트번호 변경이 필요한 경우
  - package.json을 열고
  - scripts 부분의 start에 다음을 앞에 추가
    > "set PORT=새번호"
      (예. set PORT=80 && react-scripts start)



* props(properties)
  - HTML 속성(attribute) -> Javascript 속성(property)
    input 태그의 value -> getElementById("id").value
  - react에서 properties는 부모 컴포넌트에서 자식 컴포넌트로 데이터를 전달하는데 활용.(일종의 변수)
  - 자식 컴포넌트의 시작태그와 종료태그 사이에 전달할 데이터를 작성하는 방식
    > props.children을 활용하는 방식.
    > 자식 컴포넌트에서는 {props.children}으로 출력 및 활용.
  - 조건부 렌더링에 활용
    : props을 통해 전송한 값을 조건식에 활용.
  - 기본값 설정
    : 부모 컴포넌트에서 값을 보내지 않았을 경우 대신 사용할 값(기본값) 설정 (defaultProps)
    전달 값의 자료형 검사
    : propTypes 
    필수 요소 확인
    : isRequired
  - 구조 분해 할당의 활용



* font awesome 아이콘 사용해 보기(https://fontawesome.com/icons)
  - 종류 : solid, regular, light, thin, duotone, brand
    1. 기본(core) 패키지 설치
       npm i @fortawesome/fontawesome-svg-core
    2. 아이콘 패키지 설치
       npm i @fortawesome/free-solid-svg-icons 
       npm i @fortawesome/free-regular-svg-icons
       ...
    3. 리액트용 컴포넌트
       npm i @fortawesome/react-fontawesome@latest



* 이벤트 처리
  - onclick, onchange, onkeydown 등 이벤트 처리용 속성
     -> onClick, onChange, onKeyDown 등으로 표기(카멜케이스)
        ( onclick="fun()" -> onClick={fun} )
  - 이벤트 처리 시 파라미터로 값을 넘기는 경우
    onClick={() => fun("값")}
  - form 태그와 같이 데이터를 전송하기 위해 사용하는 것 -> state
     > 상태값 : 유지 또 변경할 수 있는 데이터
     > useState : React Hooks에 포함된 상태 처리를 위한 객체.

    ※ 참고) Hooks ?
            - 초창기 react는 컴포넌트를 클래스로 작성.
            - 멤버 변수 등으로 데이터 처리가 수월함.
            - 클래스형 컴포넌트의 기능을 사용할 수 있도록 제공된 함수 라이브러리.



* useState 
  - React Hooks에 포함된 상태 처리 기능.
  - 상태값을 저장하는 변수와 변수의 값을 변경하는 함수로 구성.
     > const [useValue, setUseValue] = useState('초기값');
  - setUseValue 함수는 자바 코드로 예를 들면
    private String useValue;

    public void setUseValue(useValue){
        this.useValue = useValue;
    }

    ※ 참고) e.target = 이벤트 발생한 요소(input 태그)
             event.target.name : 이벤트가 발생한 요소의 name 속성값
             event.target.value : 이벤트가 발생한 요소의 value 속성값
                                 (= 사용자의 입력값)


* 반복된 요소(컴포넌트) 처리
  - 목록 출력 등을 할 경우 array helper의 map을 활용.
  - key : 없을 경우 warning 발생.
          리액트에서 컴포넌트 배열을 렌더링 했을 때 변동된 요소를 찾아서 관리하기 위한 값.       



    ※ 참고) Case Style(식별자 명명 방식)
        1) Camel case : 첫단어 소문자 시작, 두번째 단어부터
                        첫글자를 대문자로 작성. (myComponent)
        2) Kebab case : 모든 단어를 소문자로 하고 연결은
                        '-'를 사용 (my-componet)
        3) Pascal case : 카멜케이스와 유사. 첫단어의 첫글자도
                         대문자로 작성 (MyComponent)
        4) Snake case : 모든 단어를 소문자로 하고 연결은
                        '_'를 사용 (my_component)

    ※ 참고) 자바스크립트의 객체(Object)
             : 변수(데이터)들의 묶음.