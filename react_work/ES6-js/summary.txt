* ES6(ECMAScript 6) 문법 - ES5(구버전)

  1. let, const 키워드
     - var 한가지만 사용하던 변수 선언에 추가된 키워드.
       호이스팅(hoisting- 사용을 먼저, 선언은 나중에) 방지

  2. 템플릿 리터럴
     - let a = 10; -> 10이 리터럴이다.
     - `(back tick)을 사용하여 변수의 값을 리터럴처럼 사용하는 것.
     - 변수의 값을 출력할 때 ${변수}.
       //ES5
         var str1 = ', ';
         var str2 = 'World!';
         var str3 = 'Hello' + str1 + str2;
       //출력 : Hello, World! 
       //ES6
         let str1 = ', ';
         let str2 = 'World!';
         let str3 = `Hello${str1}${str2}`;

  3. 구조 분해 할당(Spread)
     - 객체나 배열에서 사용하는 기법으로, 객체나 배열을 해체한 후
       개별 값을 새로 할당하는 과정(방식).

  4. Spread Operator(...)
     - 배열이나 객체를 새로운 배열이나 객체로 복제.(새로운 값 추가)
     - let arr1 = [1,2,3,4];
       let arr2 = arr1; //새로운 배열이 아니라 같은 배열.
       (하나의 배열의 이름이 두개가 된 상황)

  5. Default Parameter(기본 매개 변수)
     - 함수의 인자를 넘겨줄 때, 기본값 설정이 가능함.
     - 함수를 실행할 때 매개변수에 값을 넣지 않으면, 설정한 기본값을 사용.

    ※ 함수 표현식 : 변수에 함수를 넣는 방식
        const func = function(param) { .... };
        func(param);  //사용 방식은 일반적인 함수와 동일.
        hoisting 방지.

  6. 화살표 함수(=>)
     - 함수 표현식을 화살표 함수 표현할 수 있다.
     - 함수를 간결하게 작성할 수 있는 방식으로, 가독성 및 유지 보수성을 높이는 방식(?).
     1) 변수 = function(매개변수) => { ... }
        const func = (param) => { ... };
     2) 매개변수가 하나일 경우 괄호를 생략
        const func = param => { ... };
     3) 매겨변수가 없거나 둘 이상일 경우 괄호를 반드시 써야 한다.
        const func = () => { ... };
        const func = (a, b) => { ... };
     4) 정의부에 return [값 || 식] 뿐인 함수는 return과 {}을 생략
        const func = function(param){
            return param + 1;
        }
        const func = param => {param + 1};
        const func = param => param + 1;
     5) return에 객체를 보내는 경우 () 필수.
        const func = () => ({
            a: 1,
            b: 2
        });
     6) this를 통한 동적 바인딩 불가.
        (다음과 같은 경우 화살표 함수는 사용할 수 없음.)
        $("#id").click(function(){
            $(this).text("off");
        });
        - 화살표 함수 내부의 this는 window를 나타냄.
        - this 사용하고 싶으면 화살표 함수로 표현 안 하면 됨

  7. Array Helper
     - 배열과 관련된 작업을 보다 깔끔하게 처리할 수 있도록 지원하는 것들.
     - 화살표 함수와 함께 사용
     1) forEach - 배열의 처음 요소부터 순서대로 사용하도록 지원
        array.horEach(function(value, index, arr){...})
        arr : 원본 배열(변경할 필요가 있을 경우 사용)
     2) map - 배열 내의 모든 요소 각각에 대하여 연산을 수행, 그 결과로 새 배열 생성 (원본 배열 유지)
        array.map(function(value, index, arr){...})  
     3) filter - 주어진 함수의 조건식이 true 인 요소를 모아 새 배열로 생성
        array.filter(function(value, index, arr){...})
     4) find - 주어진 판별 함수를 만족하는 첫번째 요소값을 반환
               그런 요소가 없을 경우 undefined 를 반환
        array.find(function(value){...})
        findIndex - 찾은 요소의 위치값을 반환. (없으면 -1 반환)  
     5) every - 배열 안의 모든 요소가 주어진 판별함수를 통과하는지 테스트 (boolean 값 반환)
     6) some - 배열 안의 한 요소라도 주어진 판별함수를 통과하는지 테스트 (boolean 값 반환)
     7) reduce - 배열의 각 요소에 주어진 리듀서(reducer)함수를 실행하여 하나의 결과 생성
        리듀서(reducer)함수? 현재 상태와 액션 객체를 param으로 받아서 새로운 상태를 반환하는 함수
        array.reduce(function(acc, v, i, a){...}, 초기값);
        acc(accumulator, 누산기) : 함수에서 실행한 리듀서의 값을 제공
        초기값 : 리듀스 초기값(없으면 배열의 첫번째 요소를 사용)

  8. Class
     - 객체를 생성하기 위한 템플릿을 작성하는 문법
     - 자바의 class와 유사
     - constructor: 생성자
     - 문법)
       class MyClass {
         constructor(member1 , member2){
            this.member1 = member1;
            this.member2 = member2;
         }
         function(...){...}
       }

  9. import와 export
     - Javascript 응용프로그램의 성능향상을 위한 기법
     - 별도의 재사용이 가능한 구성요소(객체, 값 등)를 작성
     - 코드를 모듈화하여 처리가 가능해 짐
     - export : 모듈화된 코드를 정의하는데 사용
       import : 정의된 모듈화 코드를 불러오는데 사용
     - 참고) 실행하려면 http-server 를 설치하고 실행해야 함 (CORS 문제)
              터미널에서 > npm i http-server -g (설치)
              실행 > npx http-server -p 포트번호

              localhost에서는 여러 export의 불러오기 처리가 안 됨
              127.0.0.1이나 실제 IP를 사용할 것
            
 10. promise(비동기 -> ajax) -> axios로 비동기 통신 처리
     - 비동기 작업을 위한 객체
     - 동기 작업 : 작업 실행 -> 결과 확인 -> 다음 작업 실행 (직렬)
                  (ex. alert 등)
       비동기 작업 : 작업 실행 -> 결과에 상관없이 다음 작업 실행
                    작업 실행 결과는 실행 완료 후에 확인 (병렬)
                    (ex. timer, interval 등)

     provider(작업의 실행)               
     - state : 비동기 작업을 제어하기 위한 단계별 상태를 정해놓은 것
               작업 중 - pending
               작업 성공(fulfilled) - resolve 함수
               작업 실패(rejected) - reject 함수

     consumer(작업 결과에 대한 처리)  
     - then : fulfilled 상태의 결과 처리
     - catch : rejected 상태의 결과 처리

     --> promise 로 처리하는 작업은 시간이 걸리는 작업 (파일 입출력, 통신 관련)
         