* ES6(ECMAScript 6) 문법 - ES5(구버전)

  1. let, const 키워드
     - var 한가지만 사용하던 변수 선언에 추가된 키워드.
       호이스팅(hoisting- 사용을 먼저, 선언은 나중에) 방지
  2. 템플릿 리터럴
     - let a = 10; -> 10이 리터럴이다.
     - `(back tick)을 사용하여 변수의 값을 리터럴처럼 사용하는 것.
     - 변수의 값을 출력할 때 ${변수}.
       //ES5
         var str1 = ', ';
         var str2 = 'World!';
         var str3 = 'Hello' + str1 + str2;
       //출력 : Hello, World! 
       //ES6
         let str1 = ', ';
         let str2 = 'World!';
         let str3 = `Hello${str1}${str2}`;

  3. 구조 분해 할당(Spread)
     - 객체나 배열에서 사용하는 기법으로, 객체나 배열을 해체한 후
       개별 값을 새로 할당하는 과정(방식).

  4. Spread Operator(...)
     - 배열이나 객체를 새로운 배열이나 객체로 복제.(새로운 값 추가)
     - let arr1 = [1,2,3,4];
       let arr2 = arr1; //새로운 배열이 아니라 같은 배열.
       (하나의 배열의 이름이 두개가 된 상황)

  5. Default Parameter(기본 매개 변수)
     - 함수의 인자를 넘겨줄 때, 기본값 설정이 가능함.
     - 함수를 실행할 때 매개변수에 값을 넣지 않으면, 설정한 기본값을 사용.

    ※ 함수 표현식 : 변수에 함수를 넣는 방식
        const func = function(param) { .... };
        func(param);  //사용 방식은 일반적인 함수와 동일.
        hoisting 방지.

  6. 화살표 함수(=>)
     - 함수 표현식을 화살표 함수 표현할 수 있다.
     - 함수를 간결하게 작성할 수 있는 방식으로, 가독성 및 유지 보수성을 높이는 방식(?).
     1) (매개변수) => { ... }
        const func = (param) => { ... };
     2) 매개변수가 하나일 경우 괄호를 생략
        const func = param => { ... };
     3) 매겨변수가 없거나 둘 이상일 경우 괄호를 반드시 써야 한다.
        const func = () => { ... };
        const func = (a, b) => { ... };
     4) 정의부에 return [값 || 식] 뿐인 함수는 return과 {}을 생략
        const func = function(param){
            return param + 1;
        }
        const func = param => {param + 1};
        const func = param => param + 1;
     5) return에 객체를 보내는 경우 () 필수.
        const func = () => ({
            a: 1,
            b: 2
        });
     6) this를 통한 동적 바인딩 불가.
        다음과 같은 경우 화살표 함수는 사용할 수 없음.
        $("#id").click(function(){
            $(this).text("off");
        });
        화살표 함수 내부의 this는 window를 나타냄.