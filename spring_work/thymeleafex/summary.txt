* 서버 재시작없이 자동 업데이트 처리
  1) Spring Devtools 포함 (프로젝트 생성 시)
  2) application.properties 에 devtools 설정
     > spring.devtools.livereload.enabled
       : 기본값 false. true 로 설정
  3) File > Setting...
    - Build, Execution, Deployment > Compiler
      > Build project automatically 항목 체크
    - Advanced Setting
      > Allow auto-make to start... 항목 체크


* Thymeleaf template
  - Spring boot 에서 view(HTML)를 처리하는 기본방식 중 하나
  - resources/templates 에 페이지의 틀을 저장하는 형식
  - jsp 처럼 prefix 와 suffix 를 설정할 필요가 없으며,
    webapp/WEB-INF/views 폴더도 만들 필요가 없음!
  - controller 에서 데이터를 전송하는 방식은 동일함
  - html 태그의 형식을 그대로 사용


* Thymeleaf 의 데이터 출력
  1) 기본적인 데이터의 출력은 EL 형식을 활용 : ${...}
  2) 링크(url) : @{link}, a 태그, action
  3) 객체의 필드(멤버변수) : *{field}

 - HTML
   > Session 에 저장된 데이터 출력
      th:text="${session.name}"
   > RedirectAttributes 에 저장된 데이터(메시지) 출력
      th:text="${name}"
 - JS
   > Session 에 저장된 데이터 출력
      let v = [[${session.name}]];
   > RedirectAttributes 에 저장된 데이터(메시지) 출력
      let v = [[${name}]];

 - 요소의 내용 부분에 데이터를 text 로 출력할 때 (innerText)
   th:text - <span th:text="${data}"></span>
   [[...]] - <span>[[${data}]]</span>
 - 요소의 내용 부분에 데이터를 text 로 출력할 때 (innerHTML)
   th:utext - <span th:utext="${data}"></span>
   [(...)] - <span>[(${data})]</span>

 - Thymeleaf 태그
   th:block - 제어문의 영역을 설정할 때 사용하는 태그

 - Thymeleaf 주요 속성
   th:text/th:utext - 요소에 서버에서 전송된 데이터를 출력
   th:inline - th:text 대신 사용 ([[...]])로 문자열 데이터 출력
               자바스크립트 지정
               <script th:inline="javascript">
   th:href - 링크 연결 속성(<a> 태그에서 사용)
             파라미터를 보내는 링크 - th:href="@{url(name=value)}"
             일반 html
             <a href="test?d1=100&d2=200">전달</a>
             Thymeleaf
             <a th:href="@{test(d1=100,d2=200)}">전달</a>
   th:action - form 태그의 action 속성과 같다

 - th:block 을 활용한 제어 속성
   1) th:each : for 문에 해당하는 속성
                for(변수 : 목록)형식으로 처리
                <th:block th:each="변수:${목록}">...</th:block>
   2) th:if : if 문에 해당하는 속성
      th:unless : else 문에 해당하는 속성
   3) th:switch, th:case : switch, case 에 해당하는 속성


* List(목록)의 null 체크 : ${#list.isEmpty(목록)}
  객체(dto)의 null 체크 : ${#object.isNull(dto)}


   참고) html 요소(element)의 구성요소
        <태그명 속성1="속성값1" 속성2="속성값2" ..>내용(content)</태그명>