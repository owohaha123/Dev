* Spring - JDBC 연동 프로젝트
  1) Dependency 추가(프로젝트 생성 시)
     Mybatis-Framework, MySQL Driver, JDBC API
  2) pom.xml 추가(tomcat, jstl 포함)
     <dependency>
         <groupId>org.bgee.log4jdbc-log4j2</groupId>
         <artifactId>log4jdbc-log4j2-jdbc4.1</artifactId>
         <version>1.16</version>
     </dependency>
  3) application.properties 설정
    # jdbc setting
    spring.datasource.driver-class-name
    spring.datasource.url
    spring.datasource.username
    spring.datasource.password

    # Mybatis Framework setting


* MyBatis
  - DB 연동에 필요한 코드와 설정을 자동으로 처리하는 프레임워크.
  - SQL 쿼리문과 해당 DAO 메소드명만 작성하면 자동으로 나머지 소스코드를 처리.
  - DAO 작성 시 반드시 Interface 로 작성.(메소드의 선언부만 필요)
  - Mybatis 맵퍼 파일(xml)에 실행할 SQL 쿼리문을 작성.
  - Mybatis 활용에 도움이 되는 플러그인(인텔리 제이용) - MybatisX

    참고) Web 프로젝트(프로그램)용 디자인 패턴 MVC
          Model - Data 처리용. Model, ModelAndView, dto 클래스
          View - 화면 처리용. jsp, thymeleaf, react 등 (HTML)
          Controller - 서비스 제공 및 제어. Service, Dao 클래스 등.

    참고) 서비스(기능) 처리 단계
          View(url) -> Controller -> Service -> Dao -> DB
          Dao 작성 시 유의할 점(With Mybatis)
           - 반드시 Interface 로 작성한다.

    참고) Interface 란?
         객체지향 특성인 추상화(abstraction)을 제공하기 위한 코드 작성 방법.
         모든 멤버 메소드의 몸통(body) 정의하지 않는 클래스.
         메소드의 선언부만 작성.


* 단위 테스트(JUnit)
  - 전체 모든 프로그램을 테스트하지 않고 각 클래스, 또는 기능별로 테스트를 진행.
  - JUnit : 자바에서 제공하는 단위 또는 전체 테스트용 도구
  - pom.xml에 junit 라이브러리를 추가한 후 사용 가능.


* DB 연동 단계
1. 드라이버 로드
2. 접속 수립
3. SQL 실행 및 결과 처리
4. 접속 종료


* Log4jdbc(DB 관련 로그 남기기)
  - 일반적인 로그는 DB 관련 처리에 대한 내용이 부족하다.
  - MyBatis 를 사용하면 실행된 SQL 쿼리문과 처리 결과에 대한 내용 확인이 어렵다
  - Log4jdbc 로 DB 관련 내용을 남겨서 이후 조치에 활용
  - 해당 라이브러리 (dependency) 포함 : log4jdbc-log4j2
    application.properties 에 설정
     > datasource.driver-class-name : net.sf.log4jdbc.sql.jdbcapi.DriverSpy
     > datasource.url : jdbc:log4jdbc:mysql://localhost...


* return "redirect:url" : 'redirect:'
  - 이 키워드는 view(jsp)의 이름이 아니라 동작을 지정하는 명령어가 됨.
  - 'redirect:url' 이 들어오면 url 을 처리하는 컨트롤러의 해당 메소드로 이동하게 된다.
  - 리다이렉트 방식에서의 데이터 전달.
    : 데이터 전달은 request 객체를 사용하게 되는데, 리다이렉트 방식은 기존 request 객체를 지우고
      새 request 객체를 생성하여 처리되므로 일반적인 방식으로 데이터를 전달할 수 없음.
     -> RedirectAttributes 객체를 사용
        리다이렉트 방식일 때 임시적으로 데이터를 전달하는데 사용하는 객체
  - 일반적인 전송(return "jsp 이름";)일 때는 Model 또는 ModelAndView,
    리다이렉트 전송(return "redirect:url";)일 때는 RedirectAttributes 활용.
  - 사용자에게 제공하는 기능 -> Service


* MyBatis mapper 작성법
  - interface 에 작성한 메소드 : public String selectData(int num);
    1) id : Dao 메소드의 이름 -> id="selectData"
    2) parameterType : Dao 메소드의 매개변수 타입 -> parameterType="Integer"
    3) resultType : Dao 메소드의 반환 타입 -> resultType="String"
  - Mapper 에 작성한 SQL 쿼리문
    : SELECT m_str FROM table_name WHERE m_code = #{num}
    4) #{num} : 'num' 은 Dao 메소드의 매개변수의 이름
                 매개변수가 DTO 인 경우 DTO 클래스의 맴버변수의 이름
                 #{변수명} -> 변수가 String 일 경우 ''를 자동으로 붙여주고,
                             변수가 int 일 경우 ''를 붙이지 않는다.
    5) ${colum_name} : 데이터 그대로 붙임. String 일 경우 자동으로 ''를 붙여주지 않는다.
                       검색 기능에 따라 컬럼명이 바뀌어야 하는 경우의 처리에 주로 사용.
        + 예) SELECT * FROM table_name WHERE ${column_name} like '%aa%'


