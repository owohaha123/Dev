* url mapping
  - URL : 사용자가 서버에 접속해서 서비스를 받기 위한 주소
  - URL 작성위치
    1) 브라우저의 주소 입력 칸에 직접 작성
    2) a 태그의 href 속성
    3) form 태그의 action 속성
    4) 자바스크립트...
  - url mapping : 사용자가 요구하는 기능과 controller 클래스의 메소드를 연결하는 것
  - 인터넷에서의 전송 방식 : form 태그의 method 속성
    1) GET 방식 - 전송하는 데이터가 주소창에 노출
    2) POST 방식 - 전송하는 데이터를 숨김
       i) form 태그에서 method 를 post 로 지정한 경우
       ii) 자바스크립트에서 post 로 지정한 경우
  - 방식 관련 어노테이션 (url mapping 용)
    1) get 방식 : @GetMapping("url")
    2) post 방식 : @PostMapping("url")
    참고) RequestMapping(value = "url", ,method = Request.POST)


* 상황처리
  0. 첫 페이지 : controller 를 거쳐서 처리되어야 함
     - http://localhost:8080 의 뒤에 '/'가 생략됨
     - '/' : root url(시작 경로)
     - 시작 페이지 : jsp 페이지로 작성
        시작페이지로 사용하는 파일명 >
        1) index.jsp(html)
        2) default.jsp(html)
        3) home.jsp(html) - spring 에서 주로 사용

  1. 페이지(jsp) -> 페이지(jsp)
     - 두 개의 jsp 준비 (첫번째 페이지 링크 작성)
     - 전환 처리용 메소드 작성

  2. 페이지(jsp) - [데이터] -> 페이지(jsp)
     - 사용자의 입력값을 프로그램에서 받기
       : form 태그와 input 태그를 사용한 데이터 입력
         1) 개별 데이터의 전달
           - jsp 에서 전송하는 모든 데이터는 문자열이다
           - input 태그의 name 속성에 작성한 값(키워드)이 변수명이 된다
         2) 묶음 데이터의 전달 (Dto 활용)
           - jsp 페이지에서 처리하는 부분은 개별 데이터 처리와 동일
           - 전송할 데이터(입력 태그)에 해당하는 DTO 클래스가 필요


    ※ 참고) jsp 페이지에서 데이터를 꺼내는 방법
        Expression Language(EL) : jsp 출력용 라이브러리
        JSTL : 자바코드를 대체하는 태그 라이브러리
               자바코드의 제어문을 태그 형식으로 작성

    ※ 참고) 외부 CSS 나 이미지를 프로젝트에 포함시키는 방법
       - application.properties 에 static resources 설정
         > spring.web.resources.static-locations=
         > 값 : classpath:static/
       - resources > static 폴더에 해당 폴더 생성
         예) 이미지는 images 폴더, 스타일시트는 css 등
       - jsp 문서에서 작성한 '폴더'/'파일명'으로 입력


    ※ 예제) 두 화면 계산기
       1. 1번 페이지에서 두 값을 입력받는다.
       2. 2번 페이지에서 계산 결과를 출력한다.